<?php

/**
 * @file
 * Install, update and uninstall functions for the custom_module module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function custom_module_install(): void {
  // Verbose output for CLI.
  if (PHP_SAPI === 'cli') {
    printf("Creating article subtitle field...\n");
  }
  // Create the subtitle field storage.
  $field_storage = FieldStorageConfig::create([
    'field_name' => 'field_subtitle',
    'entity_type' => 'node',
    'type' => 'string',
    'cardinality' => 1,
    'settings' => [
      'max_length' => 255,
    ],
  ]);
  $field_storage->save();

  // Create the subtitle field instance for Article content type.
  $field = FieldConfig::create([
    'field_storage' => $field_storage,
    'bundle' => 'article',
    'label' => 'Subtitle',
    'description' => 'Enter a subtitle for this article.',
    'required' => FALSE,
    'settings' => [],
  ]);
  $field->save();

  // Configure the form display.
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.article.default');

  if ($form_display) {
    $form_display->setComponent('field_subtitle', [
      'type' => 'string_textfield',
      'weight' => 1,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
    ])->save();
  }

  // Configure the view display with our custom formatter.
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $view_display */
  $view_display = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.article.default');

  if ($view_display) {
    $view_display->setComponent('field_subtitle', [
      'type' => 'uppercase_text',
      'weight' => 1,
      'label' => 'above',
      'settings' => [],
    ])->save();
  }

  // Place the User Status Block in the active theme.
  _custom_module_place_user_status_block();
}

/**
 * Implements hook_uninstall().
 */
function custom_module_uninstall(): void {
  // Verbose output for CLI.
  if (PHP_SAPI === 'cli') {
    printf("Deleting article subtitle field...\n");
  }
  // Remove the subtitle field from Article content type.
  $field = FieldConfig::loadByName('node', 'article', 'field_subtitle');
  if ($field) {
    $field->delete();
  }

  // Remove the field storage.
  $field_storage = FieldStorageConfig::loadByName('node', 'field_subtitle');
  if ($field_storage) {
    $field_storage->delete();
  }

  // Remove the User Status Block.
  $block = \Drupal::entityTypeManager()
    ->getStorage('block')
    ->load('custom_module_user_status');
  if ($block) {
    $block->delete();
  }

  // Remove the custom REST view if it exists.
  $view = \Drupal::entityTypeManager()
    ->getStorage('view')
    ->load('custom_module_node_rest');
  if ($view) {
    $view->delete();
    if (PHP_SAPI === 'cli') {
      printf("REST view removed.\n");
    }
  }
}

/**
 * Helper function to place the User Status Block in the active theme.
 */
function _custom_module_place_user_status_block(): void {
  // Verbose output for CLI.
  if (PHP_SAPI === 'cli') {
    printf("Placing user status block...\n");
  }
  $theme_handler = \Drupal::service('theme_handler');
  $default_theme = $theme_handler->getDefault();

  // Try to place in header region, fallback to sidebar_first, then content
  $regions_to_try = ['header', 'sidebar_first', 'content'];

  foreach ($regions_to_try as $region) {
    $theme_regions = system_region_list($default_theme, REGIONS_VISIBLE);
    if (isset($theme_regions[$region])) {
      $block_id = 'custom_module_user_status';

      // Check if block already exists
      $existing_block = \Drupal::entityTypeManager()
        ->getStorage('block')
        ->load($block_id);

      if (!$existing_block) {
        \Drupal\block\Entity\Block::create([
          'id' => $block_id,
          'theme' => $default_theme,
          'region' => $region,
          'plugin' => 'custom_module_user_status',
          'weight' => -10,
          'status' => TRUE,
          'visibility' => [],
          'settings' => [
            'label' => 'User Status',
            'label_display' => '0',
          ],
        ])->save();

        if (PHP_SAPI === 'cli') {
          printf("User Status Block placed in %s region of %s theme.\n", $region, $default_theme);
        }
      }
      break; // Stop after successfully placing in first available region
    }
  }
}
